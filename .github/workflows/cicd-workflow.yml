name: node_with_cicd_ecs

on:
   push:
    branches: [main]

jobs:
    build:
        runs-on: [ubuntu-latest]
        steps:
            - name: Checkout source
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: latest
                REPOSITORY: nodejs-app-ecs
              run: |
                # Build a docker container and
                # push it to ECR so that it can
                # be deployed to ECS.
                docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: node-app-ecs-task.json
                container-name: nodejs-app-ecs
                image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v2
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: node-app-ecs-task-service-axrt1b9n
                cluster: nodejs-app_graceful-bee-18v02m
                wait-for-service-stability: true
